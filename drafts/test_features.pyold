import pytest
import numpy as np
import scipy.io.wavfile
from spafe.utils import vis
from spafe.features.pncc import pncc
from spafe.features.lfcc import lfcc
from spafe.features.gfcc import gfcc
from spafe.features.ngcc import ngcc
from spafe.features.bfcc import bfcc
from spafe.features.msrcc import msrcc
from spafe.features.psrcc import psrcc
from spafe.features.lpc import lpc, lpcc
from spafe.features.rplp import rplp, plp
from spafe.utils.exceptions import ParameterError
from spafe.utils.cepstral import cms, cmvn, lifter_ceps
from spafe.utils.spectral import stft, display_stft
from spafe.features.mfcc import mfcc, imfcc, mfe, melfcc

DEBUG_MODE = False


def get_data(fname):
    return scipy.io.wavfile.read(fname)


@pytest.fixture
def sig():
    __EXAMPLE_FILE = 'test.wav'
    return scipy.io.wavfile.read(__EXAMPLE_FILE)[1]


@pytest.fixture
def fs():
    __EXAMPLE_FILE = 'test.wav'
    return scipy.io.wavfile.read(__EXAMPLE_FILE)[0]


@pytest.mark.test_id(201)
@pytest.mark.parametrize('num_ceps', [13, 19, 26])
@pytest.mark.parametrize('low_freq', [0, 50, 300])
@pytest.mark.parametrize('high_freq', [2000, 4000])
@pytest.mark.parametrize('n_bands', [12, 18, 24])
@pytest.mark.parametrize('nfft', [256, 512, 1024])
def test_mfcc(sig,
              fs,
              num_ceps,
              low_freq,
              high_freq,
              n_bands,
              nfft,
              lifter_exp=0.6,
              fb_type='fcmel',
              dct_type=1,
              use_cmp=True,
              win_len=0.025,
              win_hop=0.01,
              pre_emph=0.97,
              dither=1,
              sumpower=1,
              band_width=1,
              model_order=0,
              broaden=0,
              use_energy=False):
    # compute mfccs and mfes
    mfccs = mfcc(sig,
                 fs=16000,
                 num_ceps=13,
                 pre_emph=0,
                 pre_emph_coeff=0.97,
                 win_len=0.025,
                 win_hop=0.01,
                 win_type="hamming",
                 nfilts=26,
                 nfft=512,
                 low_freq=None,
                 high_freq=None,
                 scale="constant",
                 dct_type=2,
                 use_energy=False,
                 lifter=22,
                 normalize=1)
    imfccs = imfcc(sig,
                   fs=16000,
                   num_ceps=13,
                   pre_emph=0,
                   pre_emph_coeff=0.97,
                   win_len=0.025,
                   win_hop=0.01,
                   win_type="hamming",
                   nfilts=26,
                   nfft=512,
                   low_freq=None,
                   high_freq=None,
                   scale="constant",
                   dct_type=2,
                   use_energy=False,
                   lifter=22,
                   normalize=1)
    mfes = mfe(sig, fs)
    # visualize the results
    if DEBUG_MODE:
        vis.visualize_features(mfccs, 'MFCC Index', 'Frame Index')

    # compute mfccs and mfes
    melfccs = melfcc(sig, fs)
    # visualize the results
    if DEBUG_MODE:
        vis.visualize_features(melfccs.T, 'DE-MFCC Coefficient Index',
                               'Frame Index')

    # visualize the results
    if DEBUG_MODE:
        vis.visualize_features(imfccs, 'IMFCC Index', 'Frame Index')
        vis.plot(mfes, 'MFE Coefficient Index', 'Frame Index')
    assert True


@pytest.mark.test_id(202)
@pytest.mark.parametrize('num_ceps', [13, 19, 26])
@pytest.mark.parametrize('nfilts', [32, 48, 64])
@pytest.mark.parametrize('nfft', [256, 512, 1024])
@pytest.mark.parametrize('low_freq', [0, 50, 300])
@pytest.mark.parametrize('high_freq', [2000, 4000])
@pytest.mark.parametrize('dct_type', [1, 2, 3, 4])
@pytest.mark.parametrize('use_energy', [False, True])
@pytest.mark.parametrize('lifter', [0, 5])
@pytest.mark.parametrize('normalize', [False, True])
def test_lfcc(sig, fs, num_ceps, nfilts, nfft, low_freq, high_freq, dct_type,
              use_energy, lifter, normalize):
    """
    test LFCC features module for the following:
        - check that the returned number of cepstrums is correct.
        - check that the
    """

    # check error for number of filters is smaller than number of cepstrums
    with pytest.raises(ParameterError):
        # compute mfccs and mfes
        lfccs = lfcc(sig=sig,
                     fs=fs,
                     num_ceps=num_ceps,
                     nfilts=num_ceps - 1,
                     nfft=nfft,
                     low_freq=low_freq,
                     high_freq=high_freq)

    # check lifter Parameter error for low freq
    with pytest.raises(ParameterError):
        lfccs = lfcc(sig=sig,
                     fs=fs,
                     num_ceps=num_ceps,
                     nfilts=nfilts,
                     nfft=nfft,
                     low_freq=-5,
                     high_freq=high_freq)

    # check lifter Parameter error for high freq
    with pytest.raises(ParameterError):
        lfccs = lfcc(sig=sig,
            fs=fs,
            num_ceps=num_ceps,
            nfilts=nfilts,
            nfft=nfft,
            low_freq=low_freq,
            high_freq=16000)

    # compute features
    lfccs = lfcc(sig=sig,
                 fs=fs,
                 num_ceps=num_ceps,
                 nfilts=nfilts,
                 nfft=nfft,
                 low_freq=low_freq,
                 high_freq=high_freq,
                 dct_type=dct_type,
                 use_energy=use_energy,
                 lifter=lifter,
                 normalize=normalize)

    # assert number of returned cepstrum coefficients
    assert lfccs.shape[1] == num_ceps

    # check use energy
    if use_energy:
        lfccs_energy = lfccs[:, 0]
        gfccs_energy = lfcc(sig=sig,
                                   fs=fs,
                                   num_ceps=num_ceps,
                                   nfilts=nfilts,
                                   nfft=nfft,
                                   low_freq=low_freq,
                                   high_freq=high_freq,
                                   dct_type=dct_type,
                                   use_energy=use_energy,
                                   lifter=lifter,
                                   normalize=normalize)[:, 0]

        np.testing.assert_almost_equal( lfccs_energy, gfccs_energy, 3)

    # check normalize
    if normalize:
        np.testing.assert_almost_equal(lfccs,
                                       cmvn(cms(lfcc(sig=sig,
                                                     fs=fs,
                                                     num_ceps=num_ceps,
                                                     nfilts=nfilts,
                                                     nfft=nfft,
                                                     low_freq=low_freq,
                                                     high_freq=high_freq,
                                                     dct_type=dct_type,
                                                     use_energy=use_energy,
                                                     lifter=lifter,
                                                     normalize=False))),
                                        3)
    else:
        # check lifter
        if lifter > 0:
            np.testing.assert_almost_equal(lfccs,
                                           lifter_ceps(lfcc(sig=sig,
                                                             fs=fs,
                                                             num_ceps=num_ceps,
                                                             nfilts=nfilts,
                                                             nfft=nfft,
                                                             low_freq=low_freq,
                                                             high_freq=high_freq,
                                                             dct_type=dct_type,
                                                             use_energy=use_energy,
                                                             lifter=False,
                                                             normalize=normalize), lifter), 3)

    if DEBUG_MODE:
        vis.visualize_features(lfccs, 'LFCC Index', 'Frame Index')
    assert True


@pytest.mark.test_id(206)
@pytest.mark.parametrize('num_ceps', [13, 19, 26])
@pytest.mark.parametrize('low_freq', [0, 50, 300])
@pytest.mark.parametrize('high_freq', [2000, 4000])
@pytest.mark.parametrize('nfilts', [32, 48, 64])
@pytest.mark.parametrize('nfft', [256, 512, 1024])
def test_pncc(sig,
              fs,
              num_ceps,
              low_freq,
              high_freq,
              nfilts,
              nfft,
              lifter_exp=0.6,
              fb_type='fcmel',
              dct_type=1,
              use_cmp=True,
              win_len=0.025,
              win_hop=0.01,
              pre_emph=0.97,
              dither=1,
              sumpower=1,
              band_width=1,
              model_order=0,
              broaden=0):

    # compute mfccs and mfes
    pnccs = pncc(sig=sig,
                 fs=fs,
                 num_ceps=num_ceps,
                 low_freq=low_freq,
                 high_freq=high_freq,
                 nfilts=nfilts,
                 nfft=nfft)

    # assert number of returned cepstrum coefficients
    assert pnccs.shape[1] == num_ceps

    # assert number of filters is bigger than number of cepstrums
    with pytest.raises(ParameterError):
        # compute mfccs and mfes
        pnccs = pncc(sig=sig,
                     fs=fs,
                     num_ceps=num_ceps,
                     low_freq=low_freq,
                     high_freq=high_freq,
                     nfilts=num_ceps - 1,
                     nfft=nfft)

    # check lifter Parameter error for low freq
    with pytest.raises(ParameterError):
        pnccs = pncc(sig=sig,
                     fs=fs,
                     num_ceps=num_ceps,
                     low_freq=-5,
                     high_freq=high_freq,
                     nfilts=nfilts,
                     nfft=nfft)

    # check lifter Parameter error for high freq
    with pytest.raises(ParameterError):
        pnccs = pncc(sig=sig,
                     fs=fs,
                     num_ceps=num_ceps,
                     low_freq=low_freq,
                     high_freq=16000,
                     nfilts=nfilts,
                     nfft=nfft)

    if DEBUG_MODE:
        vis.visualize_features(pnccs, 'PNCC Index', 'Frame Index')
    assert True


@pytest.mark.test_id(207)
@pytest.mark.parametrize('num_ceps', [13, 19, 26])
@pytest.mark.parametrize('low_freq', [0, 50, 300])
@pytest.mark.parametrize('high_freq', [2000, 4000])
@pytest.mark.parametrize('nfilts', [32, 48, 64])
@pytest.mark.parametrize('nfft', [256, 512, 1024])
def test_rplp(sig,
              fs,
              num_ceps,
              low_freq,
              high_freq,
              nfilts,
              nfft,
              lifter_exp=0.6,
              fb_type='fcmel',
              dct_type=1,
              use_cmp=True,
              win_len=0.025,
              win_hop=0.01,
              pre_emph=0.97,
              dither=1,
              sumpower=1,
              band_width=1,
              model_order=0,
              broaden=0):
    # compute plps
    plps = plp(sig, fs, 13)
    if DEBUG_MODE:
        vis.visualize_features(plps, 'PLP Coefficient Index', 'Frame Index')
    # compute bfccs
    rplps = rplp(sig, fs, 13)
    if DEBUG_MODE:
        vis.visualize_features(rplps, 'RPLP Coefficient Index', 'Frame Index')
    assert True


@pytest.mark.test_id(208)
@pytest.mark.parametrize('num_ceps', [13, 19, 26])
@pytest.mark.parametrize('low_freq', [0, 50, 300])
@pytest.mark.parametrize('high_freq', [2000, 4000])
@pytest.mark.parametrize('nfilts', [32, 48, 64])
@pytest.mark.parametrize('nfft', [256, 512, 1024])
def test_lpc(sig,
             fs,
             num_ceps,
             low_freq,
             high_freq,
             nfilts,
             nfft,
             lifter_exp=0.6,
             fb_type='fcmel',
             dct_type=1,
             use_cmp=True,
             win_len=0.025,
             win_hop=0.01,
             pre_emph=0.97,
             dither=1,
             sumpower=1,
             band_width=1,
             model_order=0,
             broaden=0):
    # compute lpcs and lsps
    lpcs = lpc(sig, fs, 13)
    lpccs = lpcc(sig, fs, 13)
    if DEBUG_MODE:
        vis.visualize_features(lpcs, 'LPC Index', 'Frame Index')
    if DEBUG_MODE:
        vis.visualize_features(lpccs, 'LPCC Index', 'Frame Index')
    assert True


if __name__ == "__main__":
    # read wave file  and plot spectogram
    fs, sig = get_data('../test.wav')
    if DEBUG_MODE:
        vis.spectogram(sig, fs)

    # compute and display STFT
    X, _ = stft(sig=sig, fs=fs, win_type="hann", win_len=0.025, win_hop=0.01)
    if DEBUG_MODE:
        display_stft(X, fs, len(sig), 0, 2000, -10, 0)

    # init input vars
    num_ceps = 13
    low_freq = 0
    high_freq = 2000
    nfilts = 24
    nfft = 512
    dct_type=2,
    use_energy=False,
    lifter=5
    normalize=False

    # run tests
    test_mfcc(sig, fs, num_ceps, low_freq, high_freq, nfilts, nfft)
    test_lfcc(sig=sig,
                 fs=fs,
                 num_ceps=num_ceps,
                 nfilts=nfilts,
                 nfft=nfft,
                 low_freq=low_freq,
                 high_freq=high_freq,
                 dct_type=dct_type,
                 use_energy=use_energy,
                 lifter=lifter,
                 normalize=normalize)
    test_pncc(sig, fs, num_ceps, low_freq, high_freq, nfilts, nfft)

    test_lpc(sig, fs, num_ceps, low_freq, high_freq, nfilts, nfft)
    test_rplp(sig, fs, num_ceps, low_freq, high_freq, nfilts, nfft)
